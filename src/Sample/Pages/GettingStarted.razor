@page "/gettingstarted"
@inject ICssCreator CssCreator

<Dynamic TagName="h1" css="@h1">Getting Started</Dynamic>

<p>Examples taken from: <a href="https://glamorous.rocks/getting-started/">https://glamorous.rocks/getting-started/</a></p>

<Dynamic TagName="h1" css="@h1">Basic Styles</Dynamic>

<p>The above styled h1 tag was acheived by:</p>

<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span>Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"h1"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@h1"</span>></span>Basic Styles<span style="color:#03c">&lt;/<span>Dynamic</span>></span>

@@functions {
    Css.CreateNew()
        .AddRules("font-size", "2.4em", "margin-top", 10, "color", "#CC3A4B");
}
</pre>

<Dynamic TagName="h1" css="@h1">Media Queries</Dynamic>

<p>Let's make the headings shrink when the view port is narrow (like on mobile devices).</p>
<p>Update the Heading to this:</p>

<pre style="background:rgba(238,238,238,0.92);color:#000">
@@functions {
<span>const</span> string phone = <span style="color:#093">"@@media only screen and (max-width: 500px)"</span>;
    Css.CreateNew()
        .AddRules("font-size", "2.4em", "margin-top", 10, "color", "#CC3A4B")
        .AddSelector(phone, css => css.AddRules("font-size", "1.8em", "background-color", "#CC3A4B", "color", "white"));
}
</pre>

<p>Now resize the screen to see how things look</p>

<Dynamic TagName="h1" css="@h1">Pseudo Classes</Dynamic>

<p>
    Here we have a <Dynamic TagName="a" href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" css="@link">link</Dynamic>. Let's style its pseudo classes like
    <code>active</code>, <code>visited</code>, and <code>hover</code>.
</p>

<p>Update the <code>link</code> to this:</p>

<pre style="background:rgba(238,238,238,0.92);color:#000">
@@functions {
    ICss link = Css.CreateNew()
        .AddSelector(":visited", css => css.AddRule("color", "darkblue"))
        .AddSelector(":hover,:active,:focus", css => css.AddRule("color", "darkred"));
}
</pre>

<Dynamic TagName="h1" css="@h1">Pseudo Elements</Dynamic>

<ul>
    <Dynamic TagName="li" css="@listitem">this</Dynamic>
    <Dynamic TagName="li" css="@listitem">is</Dynamic>
    <Dynamic TagName="li" css="@listitem">a</Dynamic>
    <Dynamic TagName="li" css="@listitem">list</Dynamic>
</ul>

<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span style="font-weight:700">ul</span>></span>
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"li"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@listitem"</span>></span>this<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"li"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@listitem"</span>></span>is<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"li"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@listitem"</span>></span>a<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"li"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@listitem"</span>></span>list<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>
<span style="color:#03c">&lt;/<span style="font-weight:700">ul</span>></span>

@@functions {
   ICss listitem = Css.CreateNew()
        .AddSelector(":before", css => css.AddRule("content", "<span style="color:#6782d3">\\</span><span style="color:#6782d3">\"</span>💎<span style="color:#6782d3">\\</span><span style="color:#6782d3">\"</span>"));
}
</pre>

<Dynamic TagName="h1" css="@h1">Dynamic Styles</Dynamic>

<p>You can provide a action lambda to <code>AddDynamic</code> when building Css. This lambda will be called with your component Attributes.</p>

<p>The <code>pre</code> below has a language attribute. Here is a <code>pre</code> that is styled for <code>html</code>.</p>

<Dynamic TagName="pre" css="@pre" language="html">
    <code>
        &lt;html>
        &lt;head>
        &lt;title>Hello world!&lt;/title>
        &lt;/head>
        &lt;body>
        Hello world!
        &lt;/body>
        &lt;/html>
    </code>
</Dynamic>
<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"pre"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@pre"</span> <span style="color:#36c;font-style:italic">language</span>=<span style="color:#093">"html"</span>></span>
...
<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>

@@functions {
    ICss pre = Css.CreateNew()
        .AddDynamicRule((css, attributes) =>
        {
<span style="color:#00f">if</span> (<span style="color:#093">"html"</span> == attributes.GetStringAttribute(<span style="color:#093">"language"</span>))
            {
                css.AddRule(<span style="color:#093">"padding"</span>, 20)
                    .AddRule(<span style="color:#093">"background-color"</span>, <span style="color:#093">"#0c1e35"</span>)
                    .AddRule(<span style="color:#093">"color"</span>, <span style="color:#093">"white"</span>);
            }
        });
}
</pre>

<Dynamic TagName="h1" css="@h1">Merging Styles</Dynamic>

<p>
    <code>Blazorous</code> uses <a href="https://github.com/threepointone/glamor"><code>glamor</code></a> under the hood to generate and insert the CSS you write.
    One of the cool features of <code>glamor</code> is how composable it is. So with <code>&lt;Dynamic&gt;</code> tag, you can provide any number of arguments and the styles will be merged.
    Let's try some of that out now:
</p>


<Dynamic TagName="pre" css="@secondPre" css="@secondPre2" language="html">
    <code>
        &lt;html>
        &lt;head>
        &lt;title>Hello world!&lt;/title>
        &lt;/head>
        &lt;body>
        Hello world in "secondPre" style!
        &lt;/body>
        &lt;/html>
    </code>
</Dynamic>

<pre style="background:rgba(238,238,238,0.92);color:#000"><span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"pre"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@secondPre"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@secondPre2"</span> <span style="color:#36c;font-style:italic">language</span>=<span style="color:#093">"html"</span>></span>
...
<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>

@@functions {
    ICss secondPre = Css.CreateNew()
        .AddRule("position", "relative")
        .AddRule("padding", 20)
        .AddSelector(":before", css =>
        {
            css.AddRule("position", "absolute")
                .AddRule("top", 0)
                .AddRule("opacity", 0.6)
                .AddRule("left", "7px")
                .AddRule("font-size", "0.8rem");
        });

    ICss secondPre2 = Css.CreateNew()
        .AddDynamicRule((css, attributes) =>
        {
            var lang = attributes.GetStringAttribute("language");
            var isHtml = "html" == lang;
            css.AddSelector(":before", innerCss => innerCss.AddRule("content", $"\\\"{lang}\\\""));
            if (isHtml)
            {
                css.AddRule("background-color", "#0c1e35")
                    .AddRule("color", "white");
            }
        });
}
</pre>


@functions {
    const string phone = "@media only screen and (max-width: 500px)";
    ICss h1;
    ICss link;
    ICss listitem;
    ICss pre;
    ICss secondPre;
    ICss secondPre2;

    protected override void OnInit()
    {
        h1 = CssCreator.CreateNew()
            .AddRules("font-size", "2.4em", "margin-top", 10, "color", "#CC3A4B")
            .AddSelector(phone, css => css.AddRules("font-size", "1.8em", "background-color", "#CC3A4B", "color", "white"));
        link = CssCreator.CreateNew()
            .AddSelector(":visited", css => css.AddRule("color", "darkblue"))
            .AddSelector(":hover,:active,:focus", css => css.AddRule("color", "darkred"));
        listitem = CssCreator.CreateNew()
            .AddSelector(":before", css => css.AddRule("content", "\\\"💎\\\""));
        pre = CssCreator.CreateNew()
            .AddDynamicRule((css, attributes) =>
            {
                if ("html" == attributes.GetStringAttribute("language"))
                {
                    css.AddRule("padding", 20)
                        .AddRule("background-color", "#0c1e35")
                        .AddRule("color", "white");
                }
            });
        secondPre = CssCreator.CreateNew()
            .AddRule("position", "relative")
            .AddRule("padding", 20)
            .AddSelector(":before", css =>
            {
                css.AddRule("position", "absolute")
                    .AddRule("top", 0)
                    .AddRule("opacity", 0.6)
                    .AddRule("left", "7px")
                    .AddRule("font-size", "0.8rem");
            });

        secondPre2 = CssCreator.CreateNew()
            .AddDynamicRule((css, attributes) =>
            {
                var lang = attributes.GetStringAttribute("language");
                var isHtml = "html" == lang;
                css.AddSelector(":before", innerCss => innerCss.AddRule("content", $"\\\"{lang}\\\""));
                if (isHtml)
                {
                    css.AddRule("background-color", "#0c1e35")
                        .AddRule("color", "white");
                }
            });
    }
}