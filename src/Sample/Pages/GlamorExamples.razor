@page "/glamorexamples"
@inject ICssCreator CssCreator
@inject IBlazorousInterop BlazorousInterop

<h1>Glamor Examples</h1>

<p>Examples taken from: <a href="https://github.com/threepointone/glamor/blob/master/docs/howto.md">https://github.com/threepointone/glamor/blob/master/docs/howto.md</a></p>

<h2>apply a style to an element</h2>

<p>Using the Dynamic component:</p>

<Dynamic TagName="div" css="@css1">this is a nice box.</Dynamic>

<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"div"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@css1"</span>></span>this is a nice box.<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>

@@functions {
    string css1 = <span style="color:#093">"{ <span style="color:#6782d3">\"</span>color<span style="color:#6782d3">\"</span>: <span style="color:#6782d3">\"</span>red<span style="color:#6782d3">\"</span> }"</span>;
}
</pre>

<p>Or using the Blazorous Css() function directly:</p>

<div class="@class1">this is a nice box.</div>

<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span style="font-weight:700">div</span> <span style="color:#36c;font-style:italic">class</span>=<span style="color:#093">"@@class1"</span>></span>this is a nice box.<span style="color:#03c">&lt;/<span style="font-weight:700">div</span>></span>

@@functions {
    string class1 = BlazorousInterop.Css(<span style="color:#093">"{ <span style="color:#6782d3">\"</span>color<span style="color:#6782d3">\"</span>: <span style="color:#6782d3">\"</span>red<span style="color:#6782d3">\"</span> }"</span>);
}
</pre>

<h3>apply a style to an element using C# syntax</h3>

<p>You can also define Css rules in C# syntax with the dynamic tag:</p>

<Dynamic TagName="div" css="@css1CSharp">this is a nice box.</Dynamic>

<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"div"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@css1CSharp"</span>></span>this is a nice box.<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>

@@functions {
  ICss css1CSharp = Css.CreateNew().AddRule(<span style="color:#093">"color"</span>, <span style="color:#093">"red"</span>);
}
</pre>

<p>or in C# syntax without the dynamic tag:</p>

<div class="@class1CSharp">this is a nice box.</div>

<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span style="font-weight:700">div</span> <span style="color:#36c;font-style:italic">class</span>=<span style="color:#093">"@@class1CSharp"</span>></span>this is a nice box.<span style="color:#03c">&lt;/<span style="font-weight:700">div</span>></span>

@@functions {
  string class1CSharp = BlazorousInterop.Css(Css.CreateNew().AddRule(<span style="color:#093">"color"</span>, <span style="color:#093">"red"</span>).ToCss());
}
</pre>

<h2>pseudoclasses</h2>

<Dynamic TagName="div" css="@css2">hover over me</Dynamic>

<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"div"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@css2"</span>></span>hover over me<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>

@@functions {
    string css2 = @@<span style="color:#093">"{ 
        "</span><span style="color:#093">":hover"</span><span style="color:#093">": {
            "</span><span style="color:#093">"color"</span><span style="color:#093">": "</span><span style="color:#093">"blue"</span><span style="color:#093">" 
        } 
    }"</span>;
}
</pre>

<h3>pseudoclasses using C# syntax</h3>

<Dynamic TagName="div" css="@css2CSharp">hover over me</Dynamic>

<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"div"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@css2CSharp"</span>></span>hover over me<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>

@@functions {
    ICss css2CSharp = Css.CreateNew().AddSelector(":hover", css => css.AddRule("color", "blue"));
}
</pre>

<h2>multiple styles to an element</h2>

<Dynamic TagName="div" css="@css1" css="@bold">Red and Bold</Dynamic>

<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"div"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@css1"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@bold"</span>></span>Red and Bold<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>

@@functions {
    string css1 = <span style="color:#093">"{ <span style="color:#6782d3">\"</span>color<span style="color:#6782d3">\"</span>: <span style="color:#6782d3">\"</span>red<span style="color:#6782d3">\"</span> }"</span>;
    string bold = @@<span style="color:#093">"{
        "</span><span style="color:#093">"font-weight"</span><span style="color:#093">": "</span><span style="color:#093">"bold"</span><span style="color:#093">"
    }"</span>;
}
</pre>

<h3>multiple styles to an element using C# syntax</h3>

<Dynamic TagName="div" css="@css1CSharp" css="@boldCSharp">Red and Bold</Dynamic>

<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"div"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@css1CSharp"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@boldCSharp"</span>></span>Red and Bold<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>

@@functions {
    ICss css1CSharp = Css.CreateNew().AddRule(<span style="color:#093">"color"</span>, <span style="color:#093">"red"</span>);
    ICss boldCSharp = Css.CreateNew().AddRule(<span style="color:#093">"font-weight"</span>, <span style="color:#093">"bold"</span>);
}
</pre>

<h2>child selectors</h2>

<Dynamic TagName="div" css="@childExamples">
    <div class="one bold">is blue-bold!</div>
    <div class="two">hover red!</div>
</Dynamic>

<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"div"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@childExamples"</span>></span>
<span style="color:#03c">&lt;<span style="font-weight:700">div</span> <span style="color:#36c;font-style:italic">class</span>=<span style="color:#093">"one bold"</span>></span>is blue-bold!<span style="color:#03c">&lt;/<span style="font-weight:700">div</span>></span>
<span style="color:#03c">&lt;<span style="font-weight:700">div</span> <span style="color:#36c;font-style:italic">class</span>=<span style="color:#093">"two"</span>></span>hover red!<span style="color:#03c">&lt;/<span style="font-weight:700">div</span>></span>
<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>

@@functions {
    string childExamples = @@<span style="color:#093">"{
      "</span><span style="color:#093">"display"</span><span style="color:#093">": "</span><span style="color:#093">"block"</span><span style="color:#093">",
      "</span><span style="color:#093">"&amp; .bold"</span><span style="color:#093">": { "</span><span style="color:#093">"font-weight"</span><span style="color:#093">": "</span><span style="color:#093">"bold"</span><span style="color:#093">" },
      "</span><span style="color:#093">"&amp; .one"</span><span style="color:#093">": { "</span><span style="color:#093">"color"</span><span style="color:#093">": "</span><span style="color:#093">"blue"</span><span style="color:#093">" },
      "</span><span style="color:#093">":hover .two"</span><span style="color:#093">": { "</span><span style="color:#093">"color"</span><span style="color:#093">": "</span><span style="color:#093">"red"</span><span style="color:#093">" }
    }"</span>;
}
</pre>

<h3>child selectors using C# syntax</h3>

<Dynamic TagName="div" css="@childExamplesCSharp">
    <div class="one bold">is blue-bold!</div>
    <div class="two">hover red!</div>
</Dynamic>

<pre style="background:rgba(238,238,238,0.92);color:#000">
<span style="color:#03c">&lt;<span style="font-weight:700">Dynamic</span> <span style="color:#36c;font-style:italic">TagName</span>=<span style="color:#093">"div"</span> <span style="color:#36c;font-style:italic">css</span>=<span style="color:#093">"@@childExamplesCSharp"</span>></span>
<span style="color:#03c">&lt;<span style="font-weight:700">div</span> <span style="color:#36c;font-style:italic">class</span>=<span style="color:#093">"one bold"</span>></span>is blue-bold!<span style="color:#03c">&lt;/<span style="font-weight:700">div</span>></span>
<span style="color:#03c">&lt;<span style="font-weight:700">div</span> <span style="color:#36c;font-style:italic">class</span>=<span style="color:#093">"two"</span>></span>hover red!<span style="color:#03c">&lt;/<span style="font-weight:700">div</span>></span>
<span style="color:#03c">&lt;/<span style="font-weight:700">Dynamic</span>></span>

@@functions {
    ICss childExamplesCSharp = Css.CreateNew().AddRule("display", "block")
        .AddSelector("&amp; .bold", css => css.AddRule("font-weight", "bold"))
        .AddSelector("&amp; .one", css => css.AddRule("color", "blue"))
        .AddSelector(":hover .two", css => css.AddRule("color", "red"));
}
</pre>


@functions {
    string css1 = "{ \"color\": \"red\" }";
    string class1;
    string css2 = @"{
"":hover"": {
    ""color"": ""blue""
}
}";
    string bold = @"{
    ""font-weight"": ""bold""
}";
    string childExamples = @"{
    ""display"": ""block"",
    ""& .bold"": { ""font-weight"": ""bold"" },
    ""& .one"": { ""color"": ""blue"" },
    "":hover .two"": { ""color"": ""red"" }
}";

    ICss css1CSharp;
    string class1CSharp;
    ICss css2CSharp;
    ICss boldCSharp;
    ICss childExamplesCSharp;

    protected override async Task OnInitAsync()
    {
        css1CSharp = CssCreator.CreateNew().AddRule("color", "red");
        css2CSharp = CssCreator.CreateNew().AddSelector(":hover", css => css.AddRule("color", "blue"));
        boldCSharp = CssCreator.CreateNew().AddRule("font-weight", "bold");
        childExamplesCSharp = CssCreator.CreateNew().AddRule("display", "block")
                                .AddSelector("& .bold", css => css.AddRule("font-weight", "bold"))
                                .AddSelector("& .one", css => css.AddRule("color", "blue"))
                                .AddSelector(":hover .two", css => css.AddRule("color", "red"));
        class1 = await BlazorousInterop.Css("{ \"color\": \"red\" }");
        class1CSharp = await BlazorousInterop.Css(await CssCreator.CreateNew().AddRule("color", "red").ToCss());
    }
}